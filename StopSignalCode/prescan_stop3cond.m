%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Stop_behav%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Adam Aron and Gui Xue, 04-26-06%%% adapted by Saloni Krishnan, 10-06-2017%%% needs: >>> psychtoolbox installed%%%        >>> a keyboard%%%        >>> a microphone%%% will save: >>> Seeker matrix containing trial info and responses%%%%%% after running: >>> run Analysis function%%% get ready by deleting all variables and all feedback figuresclear all;script_name='Stop_behav, tracking version';script_version='1';revision_date='06-10-17';%%%%%% generate exponential distribution% rand_isi=exprnd(ones(1,64)*2);% while sum(rand_isi) > 136 | sum(rand_isi)< 120 | max(rand_isi)> 5 | min(rand_isi)<0.5%    rand_isi=exprnd(ones(1,64)*2);%    disp('Not yet');% end;%load null_events% read in subject initialstype = input('Enter manual (1), vocal (2) or word (3): ');if type==1, tasktype='sm'; elseif type==2, tasktype='sv'; elseif type==3, tasktype='sw'; endJitterType=input('Please enter jitter type(1:fixed; 2:jittered): '); %we use 1 in behaviouralif JitterType ==2, SSDfifty = input('Please enter SSDfifty: '); endfprintf('%s %s (revised %s)\n',script_name,script_version, revision_date);subject_code=input('Enter subject number: ');if type==3wordlistchoice = input('Present wordlist 1/2? ');end%sess_code=input('Enter session number: (1-5) ');sess_code=1;%Seed random number generatorrand('state',subject_code*sess_code);% write trial-by-trial data to a text logfiled=date;% logfile=sprintf('sub%d_%s_sess%d.log',subject_code,tasktype,sess_code);logfiles=sprintf('Log_behv_sub%d_j%d_%s_%s.txt',subject_code,JitterType,tasktype,d(1:6));fprintf('A log of this session will be saved to %s\n',logfiles);fullfile=['logfile/' logfiles];fid=fopen(fullfile,'a');if fid<0,    error('problem opening log file!');end;%mkdir(sprintf('results/Behv_s%d_j%d_%s_%s',subject_code,JitterType,tasktype,d(1:6)));fprintf(fid,'\n\n\n\n%s %s (revised %s)\n',script_name,script_version, ...    revision_date);fprintf(fid,'Subject %d, Session #%d\nStarted: %s %2.0f:%2.0f\n',subject_code,sess_code,date,d(4),d(5));%PsychDebugWindowConfiguration %can be disabled later%get screen readyScreen('Preference', 'SkipSyncTests', 5);pixelSize=32;[w, screenRect]=Screen(0, 'OpenWindow', 0, [], pixelSize);HideCursor;black=BlackIndex(w);white=WhiteIndex(w);blank_screen=Screen(w, 'OpenOffscreenWindow', 0, screenRect);scr=Screen(w, 'OpenOffscreenWindow', 0, screenRect);xcenter=screenRect(3)/2;ycenter=screenRect(4)/2;theFont='Courier';%get positions readyArrowSize=80;ArrowPosX=xcenter-ArrowSize/2;ArrowPosY=ycenter-ArrowSize/2;TextColor=255;%%%%************** DEFINE PARAMS HERE *************WAITTIME=1;Step=50;OCI=0.5;arrow_duration=1;if JitterType==1, NBLOCKS=5; else NBLOCKS=3; endmeanrt=zeros(1,NBLOCKS);dimerrors=zeros(1,NBLOCKS);LEFT=KbName('n'); % key 1RIGHT=KbName('m'); % key 2%%%% Setting up the sound stuff - SK - changed to new PsychPortAudio%%%% settings for MATLAB R2015bInitializePsychSound(1); %low latency settingsamp = 22255;aud_stim = sin(1:0.25:1000);aud_delay = [];aud_padding = zeros(1, round(0.005*samp));	%%% Padding lasts for 5msaud_vec = [aud_delay  aud_padding  aud_stim  0];	% Vector fed into SNDpahandle1 = PsychPortAudio('Open', [],[],[],samp,1);PsychPortAudio('FillBuffer', pahandle1, aud_vec);PsychPortAudio('Start', pahandle1,1);PsychPortAudio('Stop', pahandle1, 1);if type==2 || type==3    voicetrigger = 0.05;    maxsecs = 1;    freq = 44100;    pahandle2 = PsychPortAudio('Open', [], 2, 0, freq, 2);    PsychPortAudio('GetAudioData', pahandle2, 10);    recordedaudio = [];end%%%%%%%%%%%%%% Stimuli and Response on same matrix, pre-determined% The first column is  trial number;% The second column is block% The third column is 0 = Go, 1 = NoGo; 2 is null, 3 is notrial (kluge, see opt_stop.m)% The fourth column is 0=left, 1=right arrow; 2 is null% The fifth column is ladder number (1-4);% The sixth column is the value currently in "LadderX", corresponding to this...% The seventh column is subject response (no response is 0);% The eighth column is their reaction time% The ninth column is time since beginning of trial% The tenth column is ladder movement (-1 for down, +1 for up, 0 for N/A)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% TRIAL PRESENTATION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%totalcnt=1;  % this is the overall counterfor block=1:NBLOCKS % change number of blocks    HideCursor;        %%%%%%%%%%%%%%%%%%%%%%%%% MAKES TRIAL SEQUENCE **********    %%% this code correctly creates 64 (actually 128 with null) trials such that in every 16 trials there is one of each staircase    %%%   type and the number of left and rightward button presses is equal every four trials.    NUMCHUNKS=1;        for  tc=1:NUMCHUNKS        for qblock=1:4            LadderOrder=randperm(4);            arrows = [1 1 0 0];            [p  rand_idx]=sort(rand(1,4));            arrows=arrows(rand_idx);            for st=1:4                %there are 4 in each, one stop, three go                mini = [1 arrows(1) LadderOrder(st); 0 arrows(2) 0; 0 arrows(3) 0; 0 arrows(4) 0;];                [p  rand_idx]=sort(rand(1,4));                mini=mini(rand_idx,:);                start=(tc-1)*64+(qblock-1)*16+(st-1)*4+1;                endof=(tc-1)*64+(qblock-1)*16+(st)*4;                trialcode(start:endof,:)=mini;            end        end    end        %%%%%%%%%%%%%%%%%%% GETS STAIRCASE STUFF SET UP %%%%%%%%%%%%%%    if block==1,  %only sets this stuff up once                if JitterType==1                        Ladder1=100;            Ladder2=150;            Ladder3=200;            Ladder4=250;                    else            Ladder1=SSDfifty-60;            Ladder2=SSDfifty-20;            Ladder3=SSDfifty+20;            Ladder4=SSDfifty+60;        end                Ladder(1,1)=Ladder1;        Ladder(2,1)=Ladder2;        Ladder(3,1)=Ladder3;        Ladder(4,1)=Ladder4;            else        Ladder(1,1)=Ladder1((block-1)*4+1);        Ladder(2,1)=Ladder2((block-1)*4+1);        Ladder(3,1)=Ladder3((block-1)*4+1);        Ladder(4,1)=Ladder4((block-1)*4+1);    end            %%%%%%%%%%%%%%%%%%% PREPARES 'SEEKER' VARIABLE IN WHICH DATA ARE SAVED %%%%%%%%%%%%%%        %%% Seeker will be number of blocks*64    %%% this code take trialcode, which is 64 rows long and newly generated for each block, and appends it    %%% the ladder variable is filled in with the current relevant value even though this will change later        for  trlcnt=1:64                                                                     %go/nogo        arrow              staircase        staircase value        if trialcode(trlcnt,3)>0, Seeker((block-1)*64+trlcnt,:) = [trlcnt block  trialcode(trlcnt,1) trialcode(trlcnt,2) trialcode(trlcnt,3) Ladder(trialcode(trlcnt,3)) 0 0 0 0];        else Seeker((block-1)*64+trlcnt,:) =                      [trlcnt block  trialcode(trlcnt,1) trialcode(trlcnt,2) trialcode(trlcnt,3) 0 0 0 0 0];        end    end            %%%% load prescan_wordlist 1 or 2, 3 4, 5, 6, 10;    stopwords = {}; gowords = {};    if type==3,        if wordlistchoice==1            eval(sprintf('load wordlist/prescan_wordlist%d', block));        else            eval(sprintf('load wordlist/prescan_wordlist%d', +block+4));        end        for i = 1:16            stopwords{i} = wordlist{i};        end        for i = 17:64            gowords{i-16} = wordlist{i};        end        stopwords=stopwords(randperm(length(stopwords)));        gowords=gowords(randperm(length(gowords)));                stop_go_words=cell(64,1);        stop_go_words(find(Seeker(totalcnt:totalcnt+63,3)==1))=stopwords;        stop_go_words(find(Seeker(totalcnt:totalcnt+63,3)==0))=gowords;    end        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        Screen(w, 'TextFont', theFont);    Screen(w,'TextSize', 20);    startstring = sprintf('Get ready for block number %d', block);    Screen(w,'DrawText',startstring,100,100,TextColor);        if type==1,        inst={{'This is the STOP MANUAL experiment'} ...            {''}...            {'Remember, as FAST as you can press the'}...            {'left button if you see "T" and the right button if you see "D". '}...            {'Remember, if you hear a beep, your task'}...            {'is to STOP yourself from pressing.'}...            {''}...            {'Responding fast and stopping are equally important.'}};    elseif type==2,        inst={{'This is the STOP VOCAL experiment'} ...            {''}...            {'Remember, say as FAST as you can the'}...            {'letter "T" (say "tee") or "D" (say "dee") once you see it. '}...            {'Remember, if you hear a beep, your task'}...            {'is to STOP yourself from speaking.'}...            {''}...            {'Responding fast and stopping speech are equally important.'}};    elseif type==3        inst={{'This is the STOP WORD experiment'} ...            {''}...            {'Remember, say as FAST as you can the'}...            {'word once you see it. '}...            {'Remember, if you hear a beep, your task'}...            {'is to STOP yourself from speaking.'}...            {''}...            {'Responding fast and stopping speech are equally important.'}};    end        for x=1:size(inst,2),        Screen(w,'DrawText',inst{x}{:},100,200+x*30,TextColor);    end;    Screen('Flip',w);%     %     % mock recording to remove delay from first response recording    if type==2 || type==3    PsychPortAudio('Start', pahandle2, 0, 0, 1);    mock=PsychPortAudio('GetAudioData', pahandle2);    end        %%% wait for key press to begin    % while GetChar~='space'; end	%-use so can press any key to begin    GetChar;    Screen('CopyWindow',blank_screen, w);    Screen('Flip',w);        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        anchor=GetSecs;        for a=1:4, %4 miniblocks        for b=1:16, % within each miniblock                        Screen(w, 'TextSize', ArrowSize);            Screen(w, 'TextFont', 'Arial');            DrawFormattedText(w, '+', 'center', 'center', 255);            Screen(w, 'TextSize', ArrowSize);            Screen(w, 'TextFont', 'Arial');            Screen('Flip',w);            fixtime=GetSecs;            WaitSecs(0.5);            %             while (GetSecs - fixtime < 0.5) %less than half a second has passed%                 if Seeker(totalcnt,3)==1 && (GetSecs - fixtime) >= (Seeker(totalcnt,6)/1000 + 0.5) % if this is a no go trial No go trial%                     disp('short stop trial')%                     PsychPortAudio('FillBuffer', pahandle1, aud_stim);%                     PsychPortAudio('Start', pahandle1,1);%                     PsychPortAudio('Stop', pahandle1, 1);%                     notone=0;%                 end%             end            % The third column is 0 = Go, 1 = NoGo; 2 is null, 3 is notrial (kluge, see opt_stop.m)            % The sixth column is the value currently in "LadderX", corresponding to this...                        if type==1 || type==2                if (Seeker(totalcnt,4)==0),                    DrawFormattedText(w, 'T', 'center', 'center', 255);                else                    DrawFormattedText(w, 'D', 'center', 'center', 255);                end;            elseif type==3,  %(i.e. type==3, word)                Pos=totalcnt-(block-1)*64;                DrawFormattedText(w, stop_go_words{Pos}, 'center', 'center', 255);            end                        notone=1;            noresp=1;            novoice=1;            disp(totalcnt);            level = 0;                        Screen('Flip',w);            start_time = GetSecs; %measure RT from when arrows are shown                                    if type==1 %i.e. manual                                while (GetSecs-start_time < arrow_duration) && noresp==1 %check that response is within 1 second of arrow                                        [keyIsDown,secs,keyCode] = KbCheck;                    if keyIsDown && noresp                        if find(keyCode)==LEFT || find(keyCode)==RIGHT                            Seeker(totalcnt,7)=find(keyCode);                            Seeker(totalcnt,8)=GetSecs-start_time;                            noresp=0;                        end                    end                                        % stop trialSSD                    if Seeker(totalcnt,3)==1 &&  notone==1 &&(GetSecs - start_time >= Seeker(totalcnt,6)/1000)                        PsychPortAudio('FillBuffer', pahandle1, aud_stim);                        PsychPortAudio('Start', pahandle1,1);                        PsychPortAudio('Stop', pahandle1, 1);                        notone=0;                                                while GetSecs-start_time < arrow_duration + 1 && noresp==1                            [keyIsDown,secs,keyCode] = KbCheck;                            if keyIsDown && noresp                                if find(keyCode)==LEFT || find(keyCode)==RIGHT                                    Seeker(totalcnt,7)=find(keyCode);                                    Seeker(totalcnt,8)=GetSecs-start_time;                                    noresp=0;                                end                            end                        end                        disp(Seeker(totalcnt,8));                    end                end                                %%% punish subject for making an error                if Seeker(totalcnt,3)==0 && ( (Seeker(totalcnt,4)==0 && Seeker(totalcnt,7)==RIGHT) || ( Seeker(totalcnt,4)==1 && Seeker(totalcnt,7)==LEFT ) )                    Screen('CopyWindow',blank_screen, w);                    Screen(w, 'TextSize', 50);                    %Screen(w, 'DrawText', 'Wrong!', xcenter-100, ycenter+50,255);                    DrawFormattedText(w,'Wrong!','center','center',255);                    Screen('Flip',w);                    WaitSecs(2);                end                                            elseif (type==2 || type==3)                PsychPortAudio('Start', pahandle2, 0, 0, 1); % start recording                level = 0;                while (level < voicetrigger) && (GetSecs-start_time < arrow_duration) && noresp==1                                        [audiodata offset overflow tCaptureStart] = PsychPortAudio('GetAudioData', pahandle2); %get current audiodata                                        if ~isempty(audiodata)                        level = max(abs(audiodata(1,:))); % Compute maximum signal amplitude in this chunk of data:                    else                        level = 0;                    end                                        if level > voicetrigger                        Seeker(totalcnt,8)=GetSecs-start_time;                        Seeker(totalcnt,7)=1;                        disp(Seeker(totalcnt,8));                        noresp=0;                        PsychPortAudio('Stop', pahandle2);                    else                        WaitSecs(0.005);                    end                                        % stop trialSSD                    if Seeker(totalcnt,3)==1 &&  notone==1 &&(GetSecs - start_time >= Seeker(totalcnt,6)/1000)                        disp('STOP trial');                        PsychPortAudio('FillBuffer', pahandle1, aud_stim);                        PsychPortAudio('Start', pahandle1,1);                        PsychPortAudio('Stop', pahandle1, 1);                        notone=0;                        SSD_time = GetSecs;                                                while (GetSecs-SSD_time) < 1 && noresp==1                             [audiodata offset overflow tCaptureStart] = PsychPortAudio('GetAudioData', pahandle2);                                                        if ~isempty(audiodata)                                level = max(abs(audiodata(1,:))); % Compute maximum signal amplitude in this chunk of data:                            else                                level = 0;                            end                                                        if level > voicetrigger                                Seeker(totalcnt,8)=GetSecs-start_time;                                Seeker(totalcnt,7)=1;                                disp(Seeker(totalcnt,8));                                PsychPortAudio('Stop', pahandle2);                                noresp=0;                             else                                level=0;                                noresp=1;                            end;                        end                    end                                    end % end while                                if noresp                    PsychPortAudio('Stop', pahandle2);                    disp('No response detected');                end                            end    %end if                        tmpsecs=GetSecs;            if JitterType==2, WaitSecs(start_time+arrow_duration-tmpsecs); end; %% to simulate fMRI                        Screen('CopyWindow',blank_screen, w);            Screen('Flip',w);            WaitSecs(WAITTIME);            if JitterType==2                WaitSecs(null_events(64-mod(totalcnt,64)));            end                        %%%%%%%%%%%%%% Stimuli and Response on same matrix, pre-determined            % The first column is  trial number;            % The second column is block            % The third column is 0 = Go, 1 = NoGo; 2 is null, 3 is notrial (kluge, see opt_stop.m)            % The fourth column is 0=left, 1=right arrow; 2 is null            % The fifth column is ladder number (1-4);            % The sixth column is the value currently in "LadderX", corresponding to this...            % The seventh column is subject response (no response is 0);            % The eighth column is their reaction time            % The ninth column is time since beginning of trial            % The tenth column is ladder movement (-1 for down, +1 for up, 0 for N/A)                                                            Seeker(totalcnt,9)=GetSecs-anchor; %absolute time since beginning of block                        % print trial info to log file            tmpTime=GetSecs;            fprintf(fid,'%d\t%d\t%d\t%d\t%d\t%d\t%d\t%0.3f\t%0.3f\t%d\n',Seeker(totalcnt,:));                        totalcnt = totalcnt +1; %%% this update the overall counter                    end; % end of trial loop;                % after each 16 trials this code does the updating of staircases        %These three loops update each of the ladders        for c=(totalcnt-16):totalcnt-1,  %this looks at the last 16 trials            %This runs from one to four, one for each of the ladders            for d=1:4,                                if (Seeker(c,7)~=0 && Seeker(c,5)==d),	%col 7 is sub response                    if Ladder(d,1)>=Step, %this doesnt allow the ladder value to go below 0                        Ladder(d,1)=Ladder(d,1)-Step;                        Ladder(d,2)=-1;                    elseif Ladder(d,1)>0 && Ladder(d,1)<Step                        Ladder(d,1)=0;                        Ladder(d,2)=-1;                    else                        Ladder(d,1)=Ladder(d,1);                        Ladder(d,2)=0;                    end                    disp('Decreasing SSD to:')                    disp(Ladder(d,1))                    if (d==1),                        [x y]=size(Ladder1);                        Ladder1(x+1,1)=Ladder(d,1);                    elseif (d==2),                        [x y]=size(Ladder2);                        Ladder2(x+1,1)=Ladder(d,1);                    elseif (d==3),                        [x y]=size(Ladder3);                        Ladder3(x+1,1)=Ladder(d,1);                    elseif (d==4),                        [x y]=size(Ladder4);                        Ladder4(x+1,1)=Ladder(d,1);                    end;                elseif Seeker(c,7)==0 && Seeker(c,5)==d                     Ladder(d,1)=Ladder(d,1)+Step;                    Ladder(d,2)=1;                    disp('Increasing SSD to:')                    disp(Ladder(d,1))                    if (d==1),                        [x y]=size(Ladder1);                        Ladder1(x+1,1)=Ladder(d,1);                    elseif (d==2),                        [x y]=size(Ladder2);                        Ladder2(x+1,1)=Ladder(d,1);                    elseif (d==3),                        [x y]=size(Ladder3);                        Ladder3(x+1,1)=Ladder(d,1);                    elseif (d==4),                        [x y]=size(Ladder4);                        Ladder4(x+1,1)=Ladder(d,1);                    end;                end; % end elseif            end; % end for d=1:4        end; % end for c=...                %Updates the time in each of the subsequent stop trials        for c=totalcnt:(block-1)*64+64,            if (Seeker(c,5)~=0), %i.e. staircase trial                Seeker(c,6)=Ladder(Seeker(c,5),1);            end;        end;        %Updates each of the old trials with a +1 or a -1 (in col 10)        for c=(totalcnt-16):totalcnt-1,            if (Seeker(c,5)~=0),                Seeker(c,10)=Ladder(Seeker(c,5),2);            end;        end;            end; %end of miniblock        %%%% FEEDBACK %%%%%        %  block      		  go           response    if type==1        meanrt(block) = 1000*median(Seeker(find( Seeker(:,2)==block & Seeker(:,3)==0 & Seeker(:,7)~=0  & ( (Seeker(:,4)==1 & Seeker(:,7)==RIGHT) | ( Seeker(:,4)==0 & Seeker(:,7)==LEFT ) )),8));        dimerrors(block)=sum((Seeker(:,2)==block & Seeker(:,3)==0 & ( (Seeker(:,4)==0 & Seeker(:,7)==RIGHT) | ( Seeker(:,4)==1 & Seeker(:,7)==LEFT ) )));    else        meanrt(block) = 1000*median(Seeker(find( Seeker(:,2)==block & Seeker(:,3)==0 & Seeker(:,8)>0),8));    end            %     %make new feedback figure for each block    %     xvals=1:1:NBLOCKS;    %     subplot(2,1,1);    %     plot(xvals,meanrt,'.','markersize',30);    %     axis([1 NBLOCKS 100 900]);    %     title('Mean Reaction Time (ms) on Go trials')    %     if type==1    %         subplot(2,1,2);    %         plot(xvals,dimerrors,'.','markersize',30);    %         axis([1 NBLOCKS 1 max(dimerrors)+2]);    %         title('Number of Incorrect Responses on Go trials')    %     end    %    %     fname = sprintf('feedbackpic%d.jpg',block);    %     print('-djpeg', '-r100', fname);    %     close;            if block==NBLOCKS        c=clock;        d=date;        outfile=sprintf('results/sub%d_j%d_%s_%s_%02.0f-%02.0f.mat',subject_code, JitterType,tasktype,d(1:6),c(4),c(5));        save(outfile, 'Seeker');    end        %% close screen then reopen to show feedback%     Screen('CloseAll');%     pixelSize=32;%     [w, screenRect]=Screen(0, 'OpenWindow', 0, [], pixelSize);%     black=BlackIndex(w);%     white=WhiteIndex(w);%     blank_screen=Screen(w, 'OpenOffscreenWindow', 0, screenRect);%     scr=Screen(w, 'OpenOffscreenWindow', 0, screenRect);%     xcenter=screenRect(3)/2;%     ycenter=screenRect(4)/2;%     %     fbimage = {imread(fname, 'jpg')};%     %     texture1 = Screen('MakeTexture',w,fbimage{1});%     Screen('DrawTexture',w, texture1);%     Screen(w, 'DrawText','Press any key to continue.',320,800,255);%     Screen('Flip',w);%     while KbCheck; end % clear keyboard queue%     while ~KbCheck; end % wait for a key press    try    if type==1        Screen(w,'TextSize', 20);        Screen('DrawText',w,sprintf('Correct average RT on Go trials: %.1f (ms)', meanrt(block)),100,180);        Screen('DrawText',w,sprintf('Mistakes with arrow direction on Go trials: %d', dimerrors(block)),200,180);    else        Screen(w,'TextSize', 20);        Screen('DrawText',w,sprintf('Correct average RT on Go trials: %.1f (ms)', meanrt(block)),100,180);    end    Screen('Flip',w);catch    disp('fb error');end        %%% wait for key press to begin    while KbCheck; end % clear keyboard queue    while ~KbCheck; end % wait for a key pressend; %end block loopScreen('TextSize',w,36);Screen('TextFont',w,'Arial');Screen('DrawText',w,'Great Job. Thank you!',xcenter-200,ycenter);Screen('Flip',w);Screen('CloseAll');fclose(fid);PsychPortAudio('Close', pahandle1);if type == 2 || type == 3PsychPortAudio('Close', pahandle2);end% activewire(1,'CloseDevice');